name: CMake

on:
  push:
    branches:
      - main
    paths:
      - "**/*.h"
      - "**/*.c"
      - "**/*.cpp"
      - "**/CMakeLists.txt"
      - ".github/workflows/cmake.yml"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Add wxWidgets repository key
        run: sudo apt-key adv --recv-key --keyserver keyserver.ubuntu.com 6856E1DB1AC82609

      - name: Add wxWidgets repository
        run: sudo apt-add-repository 'deb http://repos.codelite.org/wx3.2.4/ubuntu/ jammy universe'

      - name: Install Crypto++ and wxWidgets
        run: sudo apt satisfy libnotify4 libcrypto++-dev libwxgtk3.2unofficial-dev gettext

      - name: Configure CMake
        working-directory: ${{github.workspace}}
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        working-directory: ${{github.workspace}}
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build/test
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{env.BUILD_TYPE}} || ctest -C ${{env.BUILD_TYPE}} --rerun-failed --output-on-failure
